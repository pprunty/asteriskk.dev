{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scramble-in",
  "type": "registry:component",
  "title": "Scramble In (fancycomponents.dev)",
  "description": "A component for scramble-in",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "delta/open-source-inspired-collection/scramble-in.tsx",
      "content": "'use client';\n\nimport {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react';\n\nimport { cn } from '@/lib/utils';\n\ninterface ScrambleInProps {\n  text: string;\n  scrambleSpeed?: number;\n  scrambledLetterCount?: number;\n  characters?: string;\n  className?: string;\n  scrambledClassName?: string;\n  autoStart?: boolean;\n  useIntersectionObserver?: boolean;\n  retriggerOnIntersection?: boolean;\n  intersectionThreshold?: number;\n  intersectionRootMargin?: string;\n  onStart?: () => void;\n  onComplete?: () => void;\n}\n\nexport interface ScrambleInHandle {\n  start: () => void;\n  reset: () => void;\n}\n\nconst ScrambleIn = forwardRef<ScrambleInHandle, ScrambleInProps>(\n  (\n    {\n      text,\n      scrambleSpeed = 50,\n      scrambledLetterCount = 2,\n      characters = 'abcdefghijklmnopqrstuvwxyz!@#$%^&*()_+',\n      className = '',\n      scrambledClassName = '',\n      autoStart = true,\n      useIntersectionObserver = false,\n      retriggerOnIntersection = false,\n      intersectionThreshold = 0.3,\n      intersectionRootMargin = '0px',\n      onStart,\n      onComplete,\n    },\n    ref,\n  ) => {\n    const [displayText, setDisplayText] = useState('');\n    const [isAnimating, setIsAnimating] = useState(false);\n    const [visibleLetterCount, setVisibleLetterCount] = useState(0);\n    const [scrambleOffset, setScrambleOffset] = useState(0);\n    const containerRef = useRef<HTMLSpanElement>(null);\n    const hasCompletedOnce = useRef(false);\n\n    const startAnimation = useCallback(() => {\n      setIsAnimating(true);\n      setVisibleLetterCount(0);\n      setScrambleOffset(0);\n      onStart?.();\n    }, [onStart]);\n\n    const reset = useCallback(() => {\n      setIsAnimating(false);\n      setVisibleLetterCount(0);\n      setScrambleOffset(0);\n      setDisplayText('');\n      hasCompletedOnce.current = false;\n    }, []);\n\n    useImperativeHandle(ref, () => ({\n      start: startAnimation,\n      reset,\n    }));\n\n    // Handle Intersection Observer\n    useEffect(() => {\n      if (!useIntersectionObserver || !containerRef.current) return;\n\n      const observerOptions = {\n        root: null,\n        rootMargin: intersectionRootMargin,\n        threshold: intersectionThreshold,\n      };\n\n      const handleIntersection = (entries: IntersectionObserverEntry[]) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            if (!hasCompletedOnce.current || retriggerOnIntersection) {\n              startAnimation();\n            }\n\n            // If not set to retrigger, unobserve after first animation\n            if (!retriggerOnIntersection) {\n              observer.unobserve(entry.target);\n            }\n          }\n        });\n      };\n\n      const observer = new IntersectionObserver(\n        handleIntersection,\n        observerOptions,\n      );\n      observer.observe(containerRef.current);\n\n      return () => {\n        if (containerRef.current) {\n          observer.unobserve(containerRef.current);\n        }\n      };\n    }, [\n      useIntersectionObserver,\n      retriggerOnIntersection,\n      intersectionThreshold,\n      intersectionRootMargin,\n      startAnimation,\n    ]);\n\n    // Standard autoStart if not using intersection observer\n    useEffect(() => {\n      if (autoStart && !useIntersectionObserver) {\n        startAnimation();\n      }\n    }, [autoStart, useIntersectionObserver, startAnimation]);\n\n    useEffect(() => {\n      let interval: NodeJS.Timeout;\n\n      if (isAnimating) {\n        interval = setInterval(() => {\n          // Increase visible text length\n          if (visibleLetterCount < text.length) {\n            setVisibleLetterCount((prev) => prev + 1);\n          }\n          // Start sliding scrambled text out\n          else if (scrambleOffset < scrambledLetterCount) {\n            setScrambleOffset((prev) => prev + 1);\n          }\n          // Complete animation\n          else {\n            clearInterval(interval);\n            setIsAnimating(false);\n            hasCompletedOnce.current = true;\n            onComplete?.();\n          }\n\n          // Calculate how many scrambled letters we can show\n          const remainingSpace = Math.max(0, text.length - visibleLetterCount);\n          const currentScrambleCount = Math.min(\n            remainingSpace,\n            scrambledLetterCount,\n          );\n\n          // Generate scrambled text\n          const scrambledPart = Array(currentScrambleCount)\n            .fill(0)\n            .map(\n              () => characters[Math.floor(Math.random() * characters.length)],\n            )\n            .join('');\n\n          setDisplayText(text.slice(0, visibleLetterCount) + scrambledPart);\n        }, scrambleSpeed);\n      }\n\n      return () => {\n        if (interval) clearInterval(interval);\n      };\n    }, [\n      isAnimating,\n      text,\n      visibleLetterCount,\n      scrambleOffset,\n      scrambledLetterCount,\n      characters,\n      scrambleSpeed,\n      onComplete,\n    ]);\n\n    const renderText = () => {\n      const revealed = displayText.slice(0, visibleLetterCount);\n      const scrambled = displayText.slice(visibleLetterCount);\n\n      return (\n        <>\n          <span className={className}>{revealed}</span>\n          <span className={scrambledClassName}>{scrambled}</span>\n        </>\n      );\n    };\n\n    return (\n      <>\n        <span className=\"sr-only\">{text}</span>\n        <span\n          ref={containerRef}\n          className=\"inline-block whitespace-pre-wrap\"\n          aria-hidden=\"true\"\n        >\n          {renderText()}\n        </span>\n      </>\n    );\n  },\n);\n\nScrambleIn.displayName = 'ScrambleIn';\nexport default ScrambleIn;\n",
      "type": "registry:component",
      "target": "delta/components/scramble-in.tsx"
    },
    {
      "path": "delta/open-source-inspired-collection/scramble-in-demo.tsx",
      "content": "\"use client\"\n\nimport { useRef, useEffect } from \"react\"\nimport ScrambleIn from \"./scramble-in\" // Update this path as needed\n\nexport default function ScrambleInDemo() {\n  return (\n    <div className=\"space-y-16 py-4 max-w-3xl mx-auto\">\n      <BasicScrambleDemo />\n      <SpeedVariationsDemo />\n      <CustomCharactersDemo />\n      <RetriggerOnIntersectionDemo />\n      <AlbumTracksIntersectionDemo />\n      <AlbumTracksRetriggerDemo />\n    </div>\n  )\n}\n\nexport function BasicScrambleDemo() {\n  return (\n    <section className=\"p-8 border border-border rounded-lg shadow-sm bg-background text-card-foreground\">\n      <h2 className=\"text-2xl font-bold mb-6\">Basic ScrambleIn</h2>\n      <div className=\"text-md\">\n        <ScrambleIn\n          text=\"This text will scramble in when it comes into view!\"\n          autoStart={false}\n          useIntersectionObserver={true}\n          className=\"font-medium\"\n        />\n      </div>\n    </section>\n  )\n}\n\nexport function SpeedVariationsDemo() {\n  return (\n    <section className=\"p-8 border border-border rounded-lg shadow-sm bg-background text-card-foreground\">\n      <h2 className=\"text-2xl font-bold mb-6\">Speed Variations</h2>\n      <div className=\"space-y-6\">\n        <div className=\"text-md\">\n          <ScrambleIn\n            text=\"Fast scramble effect (25ms)\"\n            scrambleSpeed={25}\n            autoStart={false}\n            useIntersectionObserver={true}\n            className=\"font-medium\"\n            scrambledClassName=\"text-primary\"\n          />\n        </div>\n        <div className=\"text-md\">\n          <ScrambleIn\n            text=\"Slow scramble effect (100ms)\"\n            scrambleSpeed={100}\n            autoStart={false}\n            useIntersectionObserver={true}\n            className=\"font-medium\"\n            scrambledClassName=\"text-primary\"\n          />\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport function CustomCharactersDemo() {\n  return (\n    <section className=\"p-8 border border-border rounded-lg shadow-sm bg-background text-card-foreground\">\n      <h2 className=\"text-2xl font-bold mb-6\">Custom Characters</h2>\n      <div className=\"space-y-6\">\n        <div className=\"text-md\">\n          <ScrambleIn\n            text=\"Using numbers for scrambling\"\n            scrambleSpeed={50}\n            characters=\"0123456789\"\n            autoStart={false}\n            useIntersectionObserver={true}\n            className=\"font-medium\"\n            scrambledClassName=\"text-primary font-mono\"\n          />\n        </div>\n        <div className=\"text-md\">\n          <ScrambleIn\n            text=\"Using symbols for scrambling\"\n            scrambleSpeed={40}\n            scrambledLetterCount={4}\n            characters=\"!@#$%^&*()_+-=[]{}|;:,.<>/?\"\n            autoStart={false}\n            useIntersectionObserver={true}\n            className=\"font-medium\"\n            scrambledClassName=\"text-primary font-mono\"\n          />\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport function RetriggerOnIntersectionDemo() {\n  return (\n    <section className=\"p-8 border border-border rounded-lg shadow-sm bg-background text-card-foreground\">\n      <h2 className=\"text-2xl font-bold mb-6\">Retrigger on Intersection</h2>\n      <p className=\"mb-4 text-muted-foreground\">This text will re-scramble each time you scroll back to it.</p>\n      <div className=\"space-y-6\">\n        <div className=\"text-md\">\n          <ScrambleIn\n            text=\"I will scramble again each time you see me!\"\n            scrambleSpeed={30}\n            autoStart={false}\n            useIntersectionObserver={true}\n            retriggerOnIntersection={true}\n            className=\"font-medium\"\n            scrambledClassName=\"text-accent-foreground\"\n          />\n        </div>\n        <div className=\"text-md mt-8\">\n          <ScrambleIn\n            text=\"Me too! Watch me scramble again when you come back.\"\n            scrambleSpeed={40}\n            scrambledLetterCount={4}\n            autoStart={false}\n            useIntersectionObserver={true}\n            retriggerOnIntersection={true}\n            className=\"font-medium\"\n            scrambledClassName=\"text-accent-foreground\"\n          />\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport function AlbumTracksIntersectionDemo() {\n  // Album tracks data\n  const titles = [\n    \"1. One More Time (featuring Romanthony) - 5:20\",\n    \"2. Aerodynamic - 3:27\",\n    \"3. Digital Love - 4:58\",\n    \"4. Harder, Better, Faster, Stronger - 3:45\",\n    \"5. Crescendolls - 3:31\",\n    \"6. Nightvision - 1:44\",\n    \"7. Superheroes - 3:57\",\n    \"8. High Life - 3:22\",\n    \"9. Something About Us - 3:51\",\n    \"10. Voyager - 3:47\",\n    \"11. Veridis Quo - 5:44\",\n    \"12. Short Circuit - 3:26\",\n    \"13. Face to Face (featuring Todd Edwards) - 3:58\",\n    \"14. Too Long (featuring Romanthony) - 10:00\",\n  ]\n\n  // Initialize album tracks refs array\n  const scrambleTracksRefs = useRef([])\n\n  // Initialize album tracks refs array\n  useEffect(() => {\n    scrambleTracksRefs.current = scrambleTracksRefs.current.slice(0, titles.length)\n  }, [titles.length])\n\n  return (\n    <section className=\"p-8 border border-border rounded-lg shadow-sm bg-background text-card-foreground\">\n      <h2 className=\"text-2xl font-bold mb-6\">Album Tracks with Intersection Observer</h2>\n      <p className=\"mb-4 text-muted-foreground\">\n        Each track uses built-in intersection observer with cascading timing:\n      </p>\n      <div className=\"space-y-3 text-left\">\n        {titles.map((track, index) => (\n          <div key={index}>\n            <ScrambleIn\n              text={track}\n              scrambleSpeed={25 + index * 2}\n              scrambledLetterCount={5}\n              autoStart={false}\n              useIntersectionObserver={true}\n              intersectionThreshold={0.1}\n              className=\"font-medium\"\n              scrambledClassName=\"text-chart-1\"\n            />\n          </div>\n        ))}\n      </div>\n    </section>\n  )\n}\n\nexport function AlbumTracksRetriggerDemo() {\n  // Album tracks data\n  const titles = [\n    \"1. One More Time (featuring Romanthony) - 5:20\",\n    \"2. Aerodynamic - 3:27\",\n    \"3. Digital Love - 4:58\",\n    \"4. Harder, Better, Faster, Stronger - 3:45\",\n    \"5. Crescendolls - 3:31\",\n  ]\n\n  return (\n    <section className=\"p-8 border border-border rounded-lg shadow-sm bg-background text-card-foreground\">\n      <h2 className=\"text-2xl font-bold mb-6\">Album Tracks with Retrigger</h2>\n      <p className=\"mb-4 text-muted-foreground\">These tracks will re-animate each time you scroll to them:</p>\n      <div className=\"space-y-3 text-left font-mono\">\n        {titles.map((track, index) => (\n          <div key={index}>\n            <ScrambleIn\n              text={track}\n              scrambleSpeed={25}\n              scrambledLetterCount={5}\n              autoStart={false}\n              useIntersectionObserver={true}\n              retriggerOnIntersection={true}\n              className=\"font-medium\"\n              scrambledClassName=\"text-chart-2\"\n            />\n          </div>\n        ))}\n      </div>\n    </section>\n  )\n}\n\n",
      "type": "registry:component",
      "target": "delta/components/scramble-in-demo.tsx"
    }
  ]
}