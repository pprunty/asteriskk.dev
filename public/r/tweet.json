{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tweet",
  "type": "registry:component",
  "title": "Tweet",
  "description": "A component for embedding and displaying tweets with server-side rendering",
  "dependencies": [
    "react-tweet"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "delta/components/tweet.tsx",
      "content": "import { Suspense } from 'react';\nimport { type Tweet, getTweet } from 'react-tweet/api';\nimport {\n  EmbeddedTweet,\n  TweetNotFound,\n  TweetSkeleton,\n  type TweetProps,\n} from 'react-tweet';\nimport '@/delta/components/tweet.css';\n\ninterface TweetArgs {\n  id: string;\n  small?: boolean;\n  className?: string;\n}\n\nasync function fetchTweetWithRetry(\n  id: string,\n  maxRetries = 3,\n  currentAttempt = 1,\n): Promise<Tweet | undefined> {\n  try {\n    const tweet = await getTweet(id);\n    return tweet;\n  } catch (error) {\n    console.error(\n      `Tweet fetch error (attempt ${currentAttempt}/${maxRetries}):`,\n      error,\n    );\n\n    // If we've reached the maximum number of retries, return undefined\n    if (currentAttempt >= maxRetries) {\n      console.warn(`Failed to fetch tweet after ${maxRetries} attempts`);\n      return undefined;\n    }\n\n    // Calculate delay with exponential backoff (300ms, 900ms, 2700ms, etc.)\n    const delay = 300 * Math.pow(3, currentAttempt - 1);\n\n    // Wait for the delay\n    await new Promise((resolve) => setTimeout(resolve, delay));\n\n    // Retry the request\n    return fetchTweetWithRetry(id, maxRetries, currentAttempt + 1);\n  }\n}\n\nconst TweetContent = async ({ id, components }: TweetProps) => {\n  const tweet = id ? await fetchTweetWithRetry(id) : undefined;\n\n  if (!tweet) {\n    return <TweetNotFound />;\n  }\n\n  return <EmbeddedTweet tweet={tweet} components={components} />;\n};\n\nexport const ReactTweet = (props: TweetProps) => (\n  <Suspense fallback={<TweetSkeleton />}>\n    <TweetContent {...props} />\n  </Suspense>\n);\n\nexport async function Tweet({ id, small = false, className = '' }: TweetArgs) {\n  // Apply max-w-xs class only if small prop is true\n  const sizeClass = small ? 'max-w-xs' : '';\n\n  return (\n    <div className={`tweet my-6 ${sizeClass} ${className}`}>\n      <div className=\"flex justify-center\">\n        <ReactTweet id={id} />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/components/tweet.tsx"
    },
    {
      "path": "delta/components/tweet-demo.tsx",
      "content": "import { Tweet } from '@/delta/components/tweet';\n\nexport default function TweetDemo() {\n  return (\n    <div className=\"container mx-auto max-w-7xl px-4 py-8 space-y-8\">\n      <SmallTweetDemo />\n      <StandardTweetDemo />\n      <MultipleTweetsDemo />\n    </div>\n  );\n}\n\nexport function SmallTweetDemo() {\n  return (\n    <div className=\"w-full max-w-2xl\">\n      <div className=\"flex justify-center\">\n        <Tweet id=\"896523232098078720\" small />\n      </div>\n      <p className=\"text-sm text-muted-foreground mt-2 text-center\">\n        Small tweets are more compact and work well on both mobile and desktop.\n      </p>\n    </div>\n  );\n}\n\nexport function StandardTweetDemo() {\n  return (\n    <div className=\"w-full max-w-2xl\">\n      <div className=\"flex justify-center\">\n        <Tweet id=\"1886192184808149383\" />\n      </div>\n      <p className=\"text-sm text-muted-foreground mt-2 text-center\">\n        Standard tweets appear large on desktop screens.\n      </p>\n    </div>\n  );\n}\n\nexport function MultipleTweetsDemo() {\n  return (\n    <div className=\"w-full max-w-2xl\">\n      <div className=\"space-y-6 flex flex-col items-center\">\n        <Tweet id=\"1899637674241048800\" />\n        <Tweet id=\"1895566669281636846\" small />\n      </div>\n      <p className=\"text-sm text-muted-foreground mt-2 text-center\">\n        Note: Standard-sized tweets use default, responsive size on desktop but\n        may require horizontal scrolling on mobile devices, depending on parent\n        container.\n      </p>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/components/tweet-demo.tsx"
    },
    {
      "path": "delta/components/tweet.css",
      "content": "/* generic resets so that we inherit from the parent */\n.tweet .react-tweet-theme {\n  /* margin is handled by our wrappers */\n  --tweet-container-margin: 0;\n  --tweet-font-family: inherit;\n  --tweet-font-color: inherit;\n\n  /* light colors override */\n  --tweet-bg-color-hover: --tweet-bg-color;\n  --tweet-color-blue-secondary: theme('colors.gray.600');\n  --tweet-color-blue-secondary-hover: theme('colors.gray.100');\n  --tweet-font-color-secondary: theme('colors.gray.500');\n\n  /* these are all default, but we reset them so they don't get\n   * overriden by the media(prefers-color-scheme: dark) selector\n   * which forces the tweet to be dark even though we allow the\n   * user to force-select a light theme */\n  --tweet-bg-color: #fff;\n  --tweet-quoted-bg-color-hover: rgba(0, 0, 0, 0.03);\n  --tweet-border: 1px solid rgb(207, 217, 222);\n  --tweet-skeleton-gradient: linear-gradient(\n    270deg,\n    #fafafa,\n    #eaeaea,\n    #eaeaea,\n    #fafafa\n  );\n  --tweet-color-red-primary: rgb(249, 24, 128);\n  --tweet-color-red-primary-hover: rgba(249, 24, 128, 0.1);\n  --tweet-color-green-primary: rgb(0, 186, 124);\n  --tweet-color-green-primary-hover: rgba(0, 186, 124, 0.1);\n  --tweet-twitter-icon-color: var(--tweet-font-color);\n  --tweet-verified-old-color: rgb(130, 154, 171);\n  --tweet-verified-blue-color: var(--tweet-color-blue-primary);\n}\n\n.dark .tweet .react-tweet-theme {\n  --tweet-bg-color: #222;\n  --tweet-bg-color-hover: #222;\n  --tweet-quoted-bg-color-hover: rgba(255, 255, 255, 0.03);\n  --tweet-border: 1px solid #333;\n  --tweet-color-blue-secondary: theme('colors.white');\n  --tweet-color-blue-secondary-hover: #333;\n  --tweet-font-color-secondary: theme('colors.gray.400');\n\n  /* Add dark mode skeleton gradient */\n  --tweet-skeleton-gradient: linear-gradient(270deg, #333, #444, #444, #333);\n}\n\n.tweet .react-tweet-theme p {\n  font-size: inherit;\n  line-height: 1.3rem;\n}\n\n.tweet .react-tweet-theme p a {\n  @apply border-b transition-[border-color] border-gray-300 hover:border-gray-600;\n}\n\n.dark .tweet .react-tweet-theme p a {\n  @apply text-white border-gray-500 hover:border-white;\n}\n\n.tweet .react-tweet-theme p a:hover {\n  text-decoration: none;\n}\n",
      "type": "registry:file",
      "target": "delta/components/tweet.css"
    }
  ]
}